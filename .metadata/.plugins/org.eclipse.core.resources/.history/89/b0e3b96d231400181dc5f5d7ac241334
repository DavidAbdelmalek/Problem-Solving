import java.io.*;
import java.lang.reflect.Array;
import java.util.*;

public class Circular_RMQ {
	public static void main(String[]args) throws IOException {
		Scanner sc = new Scanner(System.in);
		int n = sc.nextInt();
		FenwickTree tree = new FenwickTree(n);
		for(int i = 0 ; i < n ; i ++)tree.point_update(i+1, sc.nextInt());
		int q=sc.nextInt();
		int left,right,val=0;
		StringTokenizer st ;
		System.out.println(Arrays.toString(tree.ft));

		int r=0;
		while(r<q) {
			r++;
			st = new StringTokenizer(sc.nextLine());
	
			left =Integer.parseInt(st.nextToken())+1;
			right= Integer.parseInt(st.nextToken())+1;

			if(st.hasMoreTokens()) {
				val= Integer.parseInt(st.nextToken());
				tree.inc(left, right, val);
			}
			else  {System.out.println(tree.rsq(left, right));}
			
		}
		System.out.println(Arrays.toString(tree.ft));
	}
	
	static class FenwickTree { // one-based DS

		int n;
		int[] ft;
		
		FenwickTree(int size) { n = size; ft = new int[n+1]; }
		
		int rsq(int b) //O(log n)
		{
			int sum = 0;
			while(b > 0) { sum += ft[b]; b -= b & -b;}		//min?
			return sum;
		}
		

		int rsq2(int b) //O(log n)
		{
			int min = (int)1e14;
			while(b > 0) { min=Math.min(min,ft[b]); b -= b & -b;}		//min?
			return min;
		}
		
		int rsq(int left, int right) { 
			if(left<=right) return Math.min(rsq(right),rsq(left-1)); 
			else return Math.min(rsq(left-1,n), rsq(0,right));
		}	
		
		
		
		
		
		void inc(int left, int right,int val)	//O(log n), update = increment
		{
			if(left<=right) {
				for(int i = left ;i <=right ;i++) point_update(i,val);
			}else {
				for(int i = left ; i<=n ; i++) point_update(i,val);
				for(int i = 1; i<=right ; i++)point_update(i,val);
			}
		}

		
		void point_update(int k, int val)	//O(log n), update = increment
		{
			ft[k]=k; k += k & -k;
			while(k <= n) { ft[k]=Math.min(ft[k],val); k += k & -k; }		//min?
		}

		int point_query(int idx)	// c * O(log n), c < 1
		{
			int sum = ft[idx];
			if(idx > 0)
			{
				int z = idx ^ (idx & -idx);
				--idx;
				while(idx != z)
				{
					sum -= ft[idx];
					idx ^= idx & -idx;
				}
			}
			return sum;
		}
		
		void scale(int c) {	for(int i = 1; i <= n; ++i)	ft[i] *= c;	}
		
		int findIndex(int cumFreq)
		{
			int msk = n;
			while((msk & (msk - 1)) != 0)
					msk ^= msk & -msk;			//msk will contain the MSB of n
			
			int idx = 0;
			while(msk != 0)
			{
				int tIdx = idx + msk;
				if(tIdx <= n && cumFreq >= ft[tIdx])
				{
					idx = tIdx;
					cumFreq -= ft[tIdx];
				}
				msk >>= 1;
			}
			if(cumFreq != 0)
				return -1;
			return idx;
		}
	}
	
	static class Scanner 
	{
		StringTokenizer st;
		BufferedReader br;

		public Scanner(InputStream s){	br = new BufferedReader(new InputStreamReader(s));}

		public String next() throws IOException 
		{
			while (st == null || !st.hasMoreTokens()) 
				st = new StringTokenizer(br.readLine());
			return st.nextToken();
		}

		public int nextInt() throws IOException {return Integer.parseInt(next());}
		
		public long nextLong() throws IOException {return Long.parseLong(next());}

		public String nextLine() throws IOException {return br.readLine();}
		
		public double nextDouble() throws IOException
		{
			String x = next();
			StringBuilder sb = new StringBuilder("0");
			double res = 0, f = 1;
			boolean dec = false, neg = false;
			int start = 0;
			if(x.charAt(0) == '-')
			{
				neg = true;
				start++;
			}
			for(int i = start; i < x.length(); i++)
				if(x.charAt(i) == '.')
				{
					res = Long.parseLong(sb.toString());
					sb = new StringBuilder("0");
					dec = true;
				}
				else
				{
					sb.append(x.charAt(i));
					if(dec)
						f *= 10;
				}
			res += Long.parseLong(sb.toString()) / f;
			return res * (neg?-1:1);
		}
		
		public boolean ready() throws IOException {return br.ready();}


	}

}
