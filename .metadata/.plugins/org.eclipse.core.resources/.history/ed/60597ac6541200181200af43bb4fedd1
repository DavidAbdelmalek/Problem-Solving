import java.io.*;
import java.util.*;

public class Ilya_And_Queries {
	static String s;
	static int memo[][];
	static int len;
	static int memo2[];

	public static void main(String[] args) throws IOException {
		Scanner sc = new Scanner(System.in);
		StringBuilder sb = new StringBuilder("");
		s = sc.nextLine();
		len = s.length();
		
		memo = new int[len][len];
		memo2 = new int[len];
		Arrays.fill(memo2, -1);
		
		for (int i = 0; i < len; i++)
			Arrays.fill(memo[i], -1);
		
		int m = sc.nextInt();
		for(int i =0 ; i< m ; i++) 
			sb.append(dp(sc.nextInt()-1,sc.nextInt()-1)+"\n");
		System.out.println(sb);

	}

	static int dp(int L, int R) {
		if (L == R)
			return 0;
		if (memo[L][R] != -1)
			return memo[L][R];
		if (s.charAt(L) == s.charAt(L + 1))
			return memo[L][R]=1 + dp(L + 1, R);
		else
			return memo[L][R]=dp(L+1, R);
	}
	
	/*static int dp2(int L, int R) {
		if (L == R)
			return 0;
		if (memo2[L] != -1)
			return memo2[L];
		if (s.charAt(L) == s.charAt(L + 1))
			return memo2[L]=1 + dp2(L + 1, R);
		else
			return memo2[L]=dp2(L+1, R);
	}
*/

	static class Scanner {
		StringTokenizer st;
		BufferedReader br;

		public Scanner(InputStream s) {
			br = new BufferedReader(new InputStreamReader(s));
		}

		public String next() throws IOException {
			while (st == null || !st.hasMoreTokens())
				st = new StringTokenizer(br.readLine());
			return st.nextToken();
		}

		public int nextInt() throws IOException {
			return Integer.parseInt(next());
		}

		public long nextLong() throws IOException {
			return Long.parseLong(next());
		}

		public String nextLine() throws IOException {
			return br.readLine();
		}

		public double nextDouble() throws IOException {
			String x = next();
			StringBuilder sb = new StringBuilder("0");
			double res = 0, f = 1;
			boolean dec = false, neg = false;
			int start = 0;
			if (x.charAt(0) == '-') {
				neg = true;
				start++;
			}
			for (int i = start; i < x.length(); i++)
				if (x.charAt(i) == '.') {
					res = Long.parseLong(sb.toString());
					sb = new StringBuilder("0");
					dec = true;
				} else {
					sb.append(x.charAt(i));
					if (dec)
						f *= 10;
				}
			res += Long.parseLong(sb.toString()) / f;
			return res * (neg ? -1 : 1);
		}

		public boolean ready() throws IOException {
			return br.ready();
		}

	}

}
